assign(variable,get(variable)[rep(1:2,length.out=length(get(variable)))==n])
chk<-c(length(Itr),length(get(variable)))
df1<-data.frame(Itr=Itr[1:min(chk)],XX=get(variable)[1:min(chk)])
}else{
chk<-c(length(Itr),length(get(variable)))
df1<-data.frame(Itr=Itr[1:min(chk)],XX=get(variable)[1:min(chk)])}
names(df1)[2]<-variable
return(df1)
}
`get.parentage` <-
function(colony.object,pairwise=FALSE){
if(pairwise==FALSE){
Offspring<-colony.object$offspring
Offspring<-merge(Offspring,colony.object$maternity,by.x="offspringID",by.y="OffspringID",sort=FALSE,all.x=TRUE)
Offspring<-merge(Offspring,colony.object$paternity,by.x="offspringID",by.y="OffspringID",sort=FALSE,all.x=TRUE)
Offspring$InferredMum1<-as.character(Offspring$InferredMum1)
Offspring$InferredMum1[is.na(Offspring$InferredMum1)]<-"Unknown"
Offspring$InferredMum1<-as.factor(Offspring$InferredMum1)
Offspring$InferredDad1<-as.character(Offspring$InferredDad1)
Offspring$InferredDad1[is.na(Offspring$InferredDad1)]<-"Unknown"
Offspring$InferredDad1<-as.factor(Offspring$InferredDad1)
Offspring<-merge(Offspring,colony.object$mothers,by.x="InferredMum1",by.y="motherID")
Offspring<-merge(Offspring,colony.object$fathers,by.x="InferredDad1",by.y="fatherID")
xx<-as.data.frame(table(Offspring$InferredMum1,Offspring$InferredDad1))
names(xx)<-c("mums","dads","Freq")
xx2<-expand.grid(mums=colony.object$mothers$motherID,dads=colony.object$fathers$fatherID)
xx2$Freq<-rep(0,dim(xx2)[1])
omit.these<-paste(xx$mums,xx$dads)
temp<-paste(xx2$mums,xx2$dads)
xx2<-xx2[!(temp%in%omit.these),]
xx<-rbind(xx2,xx)
return(xx)
}else{
Offspring<-colony.object$offspring
Offspring<-merge(Offspring,colony.object$pairwise.maternity,by.x="offspringID",by.y="OffspringID",sort=FALSE,all.x=TRUE)
names(Offspring)[names(Offspring)=="CandidateID"]<-"CandidateMum1"
names(Offspring)[names(Offspring)=="Confidence"]<-"CandidateMum1.Confidence"
Offspring<-merge(Offspring,colony.object$pairwise.paternity,by.x="offspringID",by.y="OffspringID",sort=FALSE,all.x=TRUE)
names(Offspring)[names(Offspring)=="CandidateID"]<-"CandidateDad1"
names(Offspring)[names(Offspring)=="Confidence"]<-"CandidateDad1.Confidence"
Offspring$CandidateMum1<-as.character(Offspring$CandidateMum1)
Offspring$CandidateMum1[is.na(Offspring$CandidateMum1)]<-"Unknown"
Offspring$CandidateMum1<-as.factor(Offspring$CandidateMum1)
Offspring$CandidateDad1<-as.character(Offspring$CandidateDad1)
Offspring$CandidateDad1[is.na(Offspring$CandidateDad1)]<-"Unknown"
Offspring$CandidateDad1<-as.factor(Offspring$CandidateDad1)
Offspring<-merge(Offspring,colony.object$mothers,by.x="CandidateMum1",by.y="mother")
Offspring<-merge(Offspring,colony.object$fathers,by.x="CandidateDad1",by.y="father")
xx<-as.data.frame(table(Offspring$CandidateMum1,Offspring$CandidateDad1))
names(xx)<-c("mums","dads","Freq")
xx2<-expand.grid(mums=colony.object$mothers$motherID,dads=colony.object$fathers$fatherID)
xx2$Freq<-rep(0,dim(xx2)[1])
omit.these<-paste(xx$mums,xx$dads)
temp<-paste(xx2$mums,xx2$dads)
xx2<-xx2[!(temp%in%omit.these),]
xx<-rbind(xx2,xx)
return(xx)
}}
monitor.colony<-function(datadir=getwd(),variable="CrLogL",interv.t=2,last.few=10,n=1,showres=FALSE){
MidResult<-NULL
#Get start time
t1<-Sys.time()
elapsed.t<-0
hell<-"warm"
while(hell=="warm"){#run forever
t2<-Sys.time()
elapsed.t<-as.numeric(t2-t1)
if(elapsed.t>interv.t){
fileok<-file.exists(paste(datadir,"temp.txt",sep="/"))
if(fileok==TRUE){
if(!is.na(get.interm.data(datadir=datadir,variable=variable,n=n)[1,1])){
MidResult2<-get.interm.data(datadir=datadir,variable=variable,n=n)
MidResult<-rbind(MidResult,MidResult2)
MidResult<-unique(MidResult)
x<-MidResult[,1]
y<-MidResult[,2]
if(last.few==0){
plot(x,y,xlab="",ylab="",type="n")
points(x,y,type="b")
}else{
fr<-length(x)-last.few
if(fr<1){fr<-1}else{}
plot(x[fr:length(x)],y[fr:length(x)],xlab="",ylab="",type="n")
points(x[fr:length(x)],y[fr:length(x)],type="b")}
#add points to show max and min reached till that point
title(xlab="NumIterate",ylab=variable)
#add routine to delete contents if file is too big.
#50lines?
tmp<-readLines(paste(datadir,"temp.txt",sep="/"))
n<-50
from<-if(length(tmp)-n>0){length(tmp)-n>0}else{1}
to<-length(tmp)
write.table(tmp[from:to],file=paste(datadir,"temp.txt",sep="/"),row.names=FALSE,col.names=FALSE,quote=FALSE)
if(showres==TRUE){print(MidResult)}
cat("Plotting. Hit Esc to stop\n")
}}else{cat("Waiting...\n")}
t1<-Sys.time()
}
}
}
`plotsibs` <-
function(colony.object,maintitle="sibships",prob=0.8,pairwise=FALSE){
#Get full and half sibship data.
if(pairwise==FALSE){
sibs<-colony.object$sibs}else{
sibs<-colony.object$pairwise.sibs
sibs$Probability<-rep(1,dim(sibs)[1])}
alloffspring<-colony.object$offspring
alloffspring$offspring.numID<-as.numeric(alloffspring$offspring.numID)
#Apply the numeric ID to the sibship data.
sibs<-merge(sibs,alloffspring,by.x="OffspringID1",by.y="offspringID",sort=FALSE)
names(sibs)[names(sibs)=="offspring.numID"]<-"OffspringID1.num"
sibs<-merge(sibs,alloffspring,by.x="OffspringID2",by.y="offspringID",sort=FALSE)
names(sibs)[names(sibs)=="offspring.numID"]<-"OffspringID2.num"
sibs$OffspringID1.num<-as.numeric(sibs$OffspringID1.num)
sibs$OffspringID2.num<-as.numeric(sibs$OffspringID2.num)
#Set up the plot area.
plot(sibs$OffspringID1.num,sibs$OffspringID2.num,type="n",axes=FALSE,xlab="Offspring X",ylab="Offspring Y")
axis(1,at=alloffspring$offspring.numID,labels=alloffspring$offspringID,las=2)
axis(2,at=alloffspring$offspring.numID,labels=alloffspring$offspringID,las=2)
polygon(c(0,1.05*max(alloffspring$offspring.numID),1.05*max(alloffspring$offspring.numID)),c(0,0,1.05*max(alloffspring$offspring.numID)),col="#FF669930",border=NA)
polygon(c(0,0,1.05*max(alloffspring$offspring.numID)),c(0,1.05*max(alloffspring$offspring.numID),1.05*max(alloffspring$offspring.numID)),col="#33CCFF30",border=NA)
legend("topleft","Full Sib",bty="n")
legend("bottomright","Half Sib",bty="n")
title(main=maintitle)
#Plot the data.
hs<-subset(sibs,sibs$type=="Half"&sibs$Probability>prob)
for (i in 1:dim(hs)[1]){
#If Halfsib, then put the greater number first
if(hs[i,5]>hs[i,6]){points(hs[i,5],hs[i,6],pch=16,col="#33CCFF98")}else{points(hs[i,6],hs[i,5],pch=16,col="#33CCFF98")}
}
fs<-subset(sibs,sibs$type=="Full"&sibs$Probability>prob)
for (i in 1:dim(fs)[1]){
#If Halfsib, then put the greater number first
if(fs[i,5]<fs[i,6]){points(fs[i,5],fs[i,6],pch=16,col="#FF669998")}else{points(fs[i,6],fs[i,5],pch=16,col="#FF669998")}
}
}
run.colony<-function(colonyexecpath="prompt",datfilepath="prompt",wait=FALSE,monitor=TRUE){
#don't forget the trailing slash!
if(colonyexecpath=="prompt"){
cat("Please click to select your Colony2 executable (probably called Colony2.exe or Colony2).\n\n")
flush.console()
colonyexecpath<-file.choose()}
if(datfilepath=="prompt"){
cat("Please click to select your DAT file.\n\n")
flush.console()
datfilepath<-file.choose()}
datadir<-sub("([A-Z a-z0-9:/\\]+[/\\]+)([A-Z.a-z0-9]+)","\\1",datfilepath)
filename<-sub("([A-Z a-z0-9:/\\]+[/\\]+)([A-Z.a-z0-9]+)","\\2",datfilepath)
colonyexec<-sub("([A-Z a-z0-9:/\\]+[/\\]+)([A-Z.a-z0-9]+)","\\2",colonyexecpath)
current.wd<-getwd()
#Extract the output file name defined in the colony file.
readLines(paste(datadir,filename,sep=""),n=2)->x
outputfilename<-substring (x[2], 1, 20)
outputfilename <- sub("^[\t\n\f\r ]*", "",outputfilename) #remove leading whitespace
outputfilename <- sub("[\t\n\f\r ]*$", "", outputfilename); #remove trailing whitespace
outputfilename
if(file.exists(paste(datadir,outputfilename,".MidResult",sep=""))){stop("\nThere are output files already in the directory. \nColony has already run. \nTry deleting (or moving) these files and starting again.\n")}
setwd(datadir)
if(monitor==TRUE&wait==TRUE){stop("If you want to monitor the output, you must set wait as FALSE. Otherwise you cannot run other functions in the same R console.")}
cat("Be aware: this may take several minutes, hours, or even weeks to run, depending on the settings used.\n")
platform<-.Platform
if(platform$OS.type=="unix"){
#Unix/MacOSX commands
#Copy Colony2 program to the working directory
if(file.exists("Colony2")==FALSE){
system(paste("cp",colonyexecpath,datadir,sep=" "))
}
#Rename the DAT file as Colony2.DAT (unless it is already called "Colony2.DAT")
if(filename!="Colony2.DAT"){system(paste("mv",paste(datadir,filename,sep=""),paste(datadir,"Colony2.DAT",sep=""),sep=" "))}
#Make a copy of the DAT file in it's original name
if(filename!="Colony2.DAT"){system(paste("cp",paste(datadir,"Colony2.DAT",sep=""),paste(datadir,filename,sep=""),sep=" "))}
#Run Colony
#If monitor = TRUE, then a temp.txt file is produced (temp.txt). This can be monitored using monitor.colony.R so progress can be observed.
#wait should be set to FALSE if monitor =TRUE
#It is recommended that monitor = TRUE only be used if you will periodically monitor the system, otherwise the text file will grow very large and may burden the system.
#There is currently no way of monitoring the Windows system.
#if(monitor==TRUE){system("./Colony2.exe 2>&1 | tee temp.txt",wait=wait)}else{system("./Colony2.exe",wait=wait)}
cat("#! /bin/sh\necho Running Colony2\nexport G95_MEM_SEGMENTS=0\n./Colony2" , file = paste(datadir,"Colony2.sh",sep=""),append = FALSE)
if(monitor==TRUE){system("sh Colony2.sh | tee temp.txt",wait=wait)}else{system("sh Colony2.sh",wait=wait)}
#if(monitor==TRUE){system("./Colony2 | tee temp.txt",wait=wait)}else{system("./Colony2",wait=wait)}
#Remove the Colony2.exe and
system(paste("rm",colonyexec))
#
if(file.exists("Colony2.sh")){system(paste("rm Colony2.sh"))}else{}
if(filename!="Colony2.DAT"){system("rm Colony2.DAT")}
}else{if(platform$OS.type=="windows"){
#THIS NEEDS TESTING
#Windows commands
shell(paste("copy",colonyexecpath,datadir,sep=" "))#Copy the colony exe file to the project directory
if(filename!="Colony2.DAT"){shell(paste("rename",paste(datadir,filename,sep=""),paste(datadir,"Colony2.DAT",sep=""),sep=" "))}#Rename the colony dat file as Colony2.DAT
shell.exec("Colony2.exe") #run colony2
if(filename!="Colony2.DAT"){shell(paste("rename",paste(datadir,"Colony2.DAT",sep=""),paste(datadir,filename,sep=""),sep=" "))}#Rename the colony dat file to original file name.
shell("del Colony2.exe") #tidy up, remove colony2.exe
}else{stop(paste("This function is not correctly configured to run on",platform$OS.type,"systems."))
}}
#reset wd
setwd(current.wd)
}
# experimenting with rcolony package
build.colony.input(wd=getwd(), name="Colony2.DAT", delim="")
# experimenting with rcolony package
build.colony.input(wd=getwd(), name="TestColony.DAT", delim="")
# experimenting with rcolony package
build.colony.input(wd=getwd(), name="TestColony.DAT", delim="")
library(tidyverse)
library(tidyverse)
library(skimr)
# your code below
temps = c("T_low", "T_med", "T_high")
species = c("orange", "lemon", "lime")
expand.grid(temps, species)
expand.grid(species, temp)
expand.grid(species, temps)
expand.grid(temps, species)
# your code below
sample_number = c('1', '2')
expand.grid(temps, species, sample_number)
light = c("artificial", "natural")
expand.grid(temps, species)
expand.grid(temps, species, light)
expand.grid(temps, species, sample_number)
expand.grid(temps, species, light, sample_number)
expand.grid(temps, species, light)
expand.grid(temps, species, light, sample_number)
# your code below
sample_number = c('1')
expand.grid(temps, species, light, sample_number)
View(genotypes)
View(genotypes)
map_area <- get_stamenmap(bbox=c(left = min(geno_coords$X - 0.005),
bottom = min(geno_coords$Y - 0.005),
right = max(geno_coords$X + 0.005),
top = max(geno_coords$Y + 0.005)),
zoom = 13,
maptype = 'terrain')
library(tidyverse)
library(janitor)
library(skimr)
library(readxl)
library(ggmap)
genotypes <- read_xlsx('genotypes.xlsx')
map_area <- get_stamenmap(bbox=c(left = min(geno_coords$X - 0.005),
bottom = min(geno_coords$Y - 0.005),
right = max(geno_coords$X + 0.005),
top = max(geno_coords$Y + 0.005)),
zoom = 13,
maptype = 'terrain')
ggmap(map_area) +
theme_classic() +
geom_point(geno_coords,mapping=aes(x=X,y=Y), size= 0.01)
rem(light)
View(genotypes)
drop(light)
rm(light)
rm(temps)
rm(species)
rm(sample_number)
# experimenting with rcolony package
build.colony.input(wd=getwd(), name="TestColony.DAT", delim="")
725
# experimenting with rcolony package
build.colony.input(wd=getwd(), name="TestColony.DAT", delim="")
# experimenting with rcolony package
build.colony.input(wd=getwd(), name="TestColony.DAT", delim="")
# experimenting with rcolony package
build.colony.input(wd=getwd(), name="TestColony.DAT", delim="")
# test using sample data
get.colony.data('/Users/seanbergan/Documents/BIOL 459W/Colony2_Mac_25_11_2022',)
# test using sample data
get.colony.data('/Users/seanbergan/Documents/BIOL 459W/Colony2_Mac_25_11_2022')
# test using sample data
get.colony.data('/Users/seanbergan/Documents/BIOL 459W/Colony2_Mac_25_11_2022')
# test using sample data
get.colony.data('/Users/seanbergan/Documents/BIOL 459W/Colony2_Mac_25_11_2022', 'colony2.dat')
# test using sample data
get.colony.data('/Users/seanbergan/Documents/BIOL 459W/Colony2_Mac_25_11_2022')
# test using sample data
get.colony.data('/Users/seanbergan/Documents/BIOL 459W/Colony2_Mac_25_11_2022', 'coloy2.dat', '2.0')
View(get.colony.data)
# test using sample data
get.colony.data('/Users/seanbergan/Documents/BIOL 459W/Colony2_Mac_25_11_2022/colony2.dat')
?get.colony.data
??get.colony.data
# test using sample data
get.colony.data('/Users/seanbergan/Documents/BIOL 459W/Colony2_Mac_25_11_2022/')
# test using sample data
get.colony.data('/Users/seanbergan/Documents/BIOL 459W/Colony2_Mac_25_11_2022/')
# test using sample data
get.colony.data('/Users/seanbergan/Documents/BIOL 459W/Colony2_Mac_25_11_2022/colony2.dat', version='2.0.3')
# test using sample data
get.colony.data('/Users/seanbergan/Documents/BIOL 459W/Colony2_Mac_25_11_2022/colony2.dat', '2.0.3')
# test using sample data
get.colony.data('/Users/seanbergan/Documents/BIOL 459W/Colony2_Mac_25_11_2022/colony2.dat', 'colony2.DAT', '2.0.3')
# test using sample data
get.colony.data('/Users/seanbergan/Documents/BIOL 459W/Colony2_Mac_25_11_2022/colony2.dat', 'colony2.dat', '2.0.3')
# test using sample data
get.colony.data('/Users/seanbergan/Documents/BIOL 459W/Colony2_Mac_25_11_2022/colony2.dat', 'colony2.dat')
# test using sample data
get.colony.data('/Users/seanbergan/Documents/BIOL 459W/Colony2_Mac_25_11_2022/', 'colony2.dat')
# test using sample data
get.colony.data('/Users/seanbergan/Documents/BIOL 459W/Colony2_Mac_25_11_2022/', 'colony2.dat', '2.0.3')
View(genotypes)
View(genotypes)
skim(genotype)
skim(genotypes)
View(genotypes)
# test using sample data
get.colony.data('/Users/seanbergan/Documents/BIOL 459W/Colony2_Mac_25_11_2022/', 'colony2.dat', '2.0.3')
data(testdata)
library(tidyverse)
library(janitor)
library(skimr)
library(readxl)
library(ggmap)
skim(genotypes)
View(genotypes)
View(genotypes)
View(geno_coords)
View(geno_coords)
geno_coords <- inner_join(genotypes, coords, by = c("Tree" = "Tree"))
View(coords)
View(coords)
View(genotypes)
View(genotypes)
skim(geno_coords)
geno_coords <- inner_join(genotypes, coords, by = c("Sample id" = "Sample id"))
# id is currently numeric so probably better to make it char to be safe
genotypes <- genotypes %>% mutate(`Sample id` = as.character(`Sample id`))
# id is currently numeric so probably better to make it char to be safe
genotypes <- genotypes %>% mutate(`Sample id` = as.character(`Sample id`))
geno_coords <- inner_join(genotypes, coords, by = c("Tree" = "Tree"))
skim(geno_coords)
View(genotypes)
View(genotypes)
View(genotypes)
skim_(geno_coords)
skim(geno_coords)
skim(genotypes)
names(genotypes)
names(genotypes)
genotypes %>% select(-Tree, -"Sample id")
genotypes %>% select(-Tree, -"Sample id") %>% names()
markers <- genotypes %>% select(-Tree, -"Sample id") %>% names()
# for some reason Lat is a character so..
?mutate
rename("Fil36 Allele#1" = "fil36 Allele#1")
genotypes %>% rename("Fil36 Allele#1" = "fil36 Allele#1")
genotypes %>% rename("fil36 Allele#1" = "Fil36 Allele#1")
names(genotypes)
markers <- genotypes %>% select(-Tree, -"Sample id") %>% names()
# id is currently numeric so probably better to make it char to be safe
genotypes <- genotypes %>% mutate(`Sample id` = as.character(`Sample id`), ) %>% rename("fil36 Allele#1" = "Fil36 Allele#1")
names(genotypes)
markers <- genotypes %>% select(-Tree, -"Sample id") %>% names()
markers
?str_replace
str_replace(markers, " +$", "")
str_replace(markers, " +.$", "")
str_replace(markers, " +#.$", "")
str_replace(markers, " A*$", "")
str_replace(markers, " .*$", "")
markers
str_replace(markers, " .*$", "") %>% unique()
simple_markers <- str_replace(markers, " .*$", "") %>% unique()
tibble(c(simple_markers, 0, 0.0000, 0.0001))
# yb01    yb15    yb21    yb04    yb06    yb12    yb13    fil36    yb08    yb22
genotypes %>% select(-`Sample id`)
offspring <- genotypes %>% mutate(Tree = Tree + '-O')
?paste
offspring <- genotypes %>% mutate(Tree = paste('O', Tree, sep="-"))
offspring
write_csv(offspring, "offspring.txt", delim='    ')
?write_csv
write_csv(offspring, "offspring.txt", delim="   ")
write_delim(offspring, "offspring.txt", delim="   ")
?write_csv
write_tsv(offspring, "offspring.txt", col_names=F)
offspring <- genotypes %>%
mutate(Tree = paste('O', Tree, sep="-")) %>%
select(-`Sample id`)
offspring %>%  mutate_all(str_replace(pattern="\?"))
?str_replace
offspring %>%  mutate_all(str_replace(pattern="\'?"))
offspring %>%  mutate_all(str_replace(pattern="\'?", string='0'))
offspring %>%  mutate_all(str_replace(pattern="\'?", replacement='0'))
offspring %>%  mutate_all(str_replace(pattern="\'?", replacement='0'))
offspring <- genotypes %>%
mutate(Tree = paste('O', Tree, sep="-")) %>%
select(-`Sample id`)
offspring %>%  mutate_all(str_replace(pattern="\'?", replacement='0'))
inner_join(genotype, genotype)
inner_join(genotypes, genotypes)
inner_join(genotypes, genotypes, by=c("Tree"="Tree"))
inner_join(genotypes, genotypes, by=c("Tree"="Tree"))
?inner_join
offspring %>%  mutate_all(str_replace(pattern="\'?", replacement='0'))
offspring %>%  mutate_all(str_replace(pattern="\'?", replacement='0'))
?duplicated
duplicated(offspring$Tree)
$Tree
duplicated(offspring)
offspring %>%
filter(duplicated(Tree))
offspring$Tree %>%
filter(duplicated(Tree))
offspring %>%
filter(duplicated(Tree))
offspring %>% filter(Tree=='O-TV3042')
offspring %>% filter(Tree=='O-TV3043')
offspring %>% filter(Tree=='O-TV3044')
offspring %>% unique()
# id is currently numeric so probably better to make it char to be safe
genotypes <- genotypes %>%
mutate(`Sample id` = as.character(`Sample id`), ) %>%
rename("fil36 Allele#1" = "Fil36 Allele#1") %>%
unqiue()
# id is currently numeric so probably better to make it char to be safe
genotypes <- genotypes %>%
mutate(`Sample id` = as.character(`Sample id`), ) %>%
rename("fil36 Allele#1" = "Fil36 Allele#1") %>%
unique()
# id is currently numeric so probably better to make it char to be safe
genotypes <- genotypes %>%
mutate(`Sample id` = as.character(`Sample id`), ) %>%
rename("fil36 Allele#1" = "Fil36 Allele#1") %>%
unique()
# id is currently numeric so probably better to make it char to be safe
genotypes <- genotypes %>%
mutate(`Sample id` = as.character(`Sample id`), ) %>%
# rename("fil36 Allele#1" = "Fil36 Allele#1") %>%
unique()
offspring <- genotypes %>%
mutate(Tree = paste('O', Tree, sep="-")) %>%
select(-`Sample id`) %>%
unique()
offspring %>%  mutate_all(str_replace(pattern="\'?", replacement='0'))
# id is currently numeric so probably better to make it char to be safe
genotypes <- genotypes %>%
mutate(`Sample id` = as.character(`Sample id`), ) %>%
# rename("fil36 Allele#1" = "Fil36 Allele#1") %>%
unique()
geno_coords <- inner_join(genotypes, coords, by = c("Tree" = "Tree"))
dim(geno_coords) %>% unique()
offspring %>%  mutate_all(str_replace(pattern="\'?", replacement='0'))
p
write_tsv(offspring, "offspring.txt", col_names=F)
mothers <- genotypes %>%
mutate(Tree = paste('mom', Tree, sep="-")) %>%
select(-`Sample id`)
fathers <- genotypes %>%
mutate(Tree = paste('fat', Tree, sep="-")) %>%
select(-`Sample id`)
fathers <- genotypes %>%
mutate(Tree = paste('fat', Tree, sep="-")) %>%
select(-`Sample id`)
write_tsv(fathers, "fathers.txt", col_names=F)
write_tsv(mothers, "mothers.txt", col_names=F)
# creating known exclusion diads
known_pat_exclusions <- tibble(offspring$Tree)
known_pat_exclusions %>% mutate(num_exclusions = 1)
known_pat_exclusions$father_ids <- fathers$Tree
known_pat_exclusions
# creating known exclusion diads
known_pat_exclusions <- tibble(offspring$Tree)
known_pat_exclussions <- known_pat_exclusions %>% mutate(num_exclusions = 1)
known_pat_exclusions$father_ids <- fathers$Tree
known_pat_exclusions
# creating known exclusion diads
known_pat_exclusions <- tibble(offspring$Tree)
known_pat_exclussions <- known_pat_exclusions %>% mutate(num_exclusions = 1)
known_pat_exclusions
View(known_pat_exclussions)
known_pat_exclussions <- known_pat_exclusions %>% mutate(num_exclusions = 1)
known_pat_exclusions <- known_pat_exclusions %>% mutate(num_exclusions = 1)
known_pat_exclusions$father_ids <- fathers$Tree
known_pat_exclusions
write_tsv(known_pat_exclusions, 'pat-exclusions.txt', col_names = F)
known_mat_exclusions <- tibble(offspring$Tree)
known_mat_exclusions <- known_mat_exclusions %>% mutate(num_exclusions = 1)
known_pat_exclusions$mother_ids <- mothers$Tree
write_tsv(known_mat_exclusions, 'mat-exclusions.txt', col_names = F)
known_pat_exclusions
known_mat_exclusions
known_pat_exclusions$mother_ids
known_mat_exclusions
known_pat_exclusions
# creating known exclusion diads
known_pat_exclusions <- tibble(offspring$Tree)
known_pat_exclusions <- known_pat_exclusions %>% mutate(num_exclusions = 1)
known_pat_exclusions$father_ids <- fathers$Tree
known_pat_exclusions
#same but for mothers
known_mat_exclusions <- tibble(offspring$Tree)
known_mat_exclusions <- known_mat_exclusions %>% mutate(num_exclusions = 1)
#same but for mothers
known_mat_exclusions <- tibble(offspring$Tree)
known_mat_exclusions <- known_mat_exclusions %>% mutate(num_exclusions = 1)
known_mat_exclusions$mother_ids <- mothers$Tree
write_tsv(known_mat_exclusions, 'mat-exclusions.txt', col_names = F)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
(1/8)
(1-(1/8))^12
knitr::opts_chunk$set(echo = TRUE)
plot(pressure)
tibble(numberOfReds=0:5,probs=c(0.06,0.16,0.33,0.26,0.16,0.03))
tibble(numberOfReds=0:5,probs=c(0.06,0.16,0.33,0.26,0.16,0.03))
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
tibble(numberOfReds=0:5,probs=c(0.06,0.16,0.33,0.26,0.16,0.03))
