select(Tree, parent_id, LOD, parent_lod_score, parent_x, parent_y, offspring_x, offspring_y, tt)
names(franz_coords)
nrow(franz_coords)
?inner_join
?gather
franz_map_area <- get_stamenmap(bbox=c(
left = min(franz_coords$offspring_x - 0.003),
bottom = min(franz_coords$offspring_y - 0.003),
right = max(franz_coords$offspring_x + 0.003),
top = max(franz_coords$offspring_y + 0.003)),
zoom = 14,
maptype = 'terrain')
ggmap(franz_map_area) +
# geom_point(geno_coords, mapping=aes(X, Y), size = 0.5) +
geom_segment(franz_coords,
mapping=aes(x=parent_x, y=parent_y, xend=offspring_x, yend=offspring_y, color=tt),
arrow = arrow(
length = unit(0.01, "npc"),
type = "closed",
angle = 20),
size=1) +
facet_grid(.~tt)
franz_distances <- franz_coords %>%
mutate(offspring_coord_vector=paste(as.character(offspring_x), as.character(offspring_y))) %>%
mutate(parent_coord_vector=paste(as.character(parent_x), as.character(parent_y)))
head(franz_distances)
distm(as.vector(strsplit(franz_distances$offspring_coord_vector[1], " ", fixed=T)))
franz_coords
?strsplit
franz_distances$offspring_coord_vector[1]
strsplit(franz_distances$offspring_coord_vector[1], " ", fixed=T)
c(franz_distances$offspring_coord_vector[1])
c(strsplit(franz_distances$offspring_coord_vector[1], " ", fixed=T))
length(unlist(strsplit(franz_distances$offspring_coord_vector[1], " ", fixed=T)))
# okay everything above is messy and overcomplicated but this is going to work so I'm not going to mess with it..
nrow(franz_distances)
head(franz_distances)
distances_m = tibble(offspring_id = "some_id", parent_id = "other_id", distance = 0)
for (i in 1:(nrow(franz_distances)) ){
distances_m <- distances_m %>% add_row(
offspring_id = franz_distances$Tree[i],
parent_id = franz_distances$parent_id[i],
distance = as.numeric(distm(as.numeric(unlist(strsplit(franz_distances$offspring_coord_vector[i], " ", fixed=T))),
as.numeric(unlist(strsplit(franz_distances$parent_coord_vector[i], " ", fixed=T)))))
)
#print(i)
#print(franz_distances$Tree[i])
#print(as.numeric(distm(as.numeric(unlist(strsplit(franz_distances$offspring_coord_vector[i], " ", fixed=T))),
#as.numeric(unlist(strsplit(franz_distances$parent_coord_vector[i], " ", fixed=T))))))
}
distances_m
distm(as.numeric(unlist(strsplit(franz_distances$offspring_coord_vector[3], " ", fixed=T))),
as.numeric(unlist(strsplit(franz_distances$parent_coord_vector[3], " ", fixed=T))))
distances_m <- distances_m %>% filter(offspring_id != "some_id")
distances_m
# now lets join this onto franz_filtered
trees_distances <- inner_join(distances_m, franz_coords, by = c("offspring_id"="Tree",
"parent_id"="parent_id"))
trees_distances %>% group_by(tt) %>%
summarize(median_d = median(distance),
mean_d = mean(distance),
sd_d = sd(distance),
max_d = max(distance),
min_d = min(distance),
n = n())
trees_distances %>%
# filter(distance < 1000) %>%
ggplot(aes(x = distance,y=after_stat(density))) +
geom_histogram(fill="thistle2", bins=50) +
facet_grid(.~tt) +
geom_density(color = "red") +
theme_classic()
t.test(
x = trees_distances %>% filter(tt) %>% select(distance),
y = trees_distances %>% filter(is.na(tt)) %>% select(distance)
)
# feasible_distances = as.vector(trees_distances %>% filter(is.na(tt)) %>% select(distance))
# feasible_distances
mean(feasible_distances)
trees_distances %>% group_by(tt) %>%
summarize(median_d = median(distance),
mean_d = mean(distance),
sd_d = sd(distance),
max_d = max(distance),
min_d = min(distance),
n = n())
cloneless_franz <- read_csv("franz-grouped/all-clusters/cloneless/parentage.csv")
names(cloneless_franz)
# made it tall so that each parent relationship was its own row with parent_lod_score
filtered_franz <- cloneless_franz %>%
rename(Tree=Offspring) %>%
gather(key=parent_num, value=parent_id, `Parent 1`, `Parent 2`, na.rm = T) %>%
gather(key=parent_num, value=parent_lod_score, `Pair LOD Parent 1`, `Pair LOD Parent 1`) %>%
filter(parent_lod_score > 3)
time_travellers <- inner_join(filtered_franz, filtered_franz, by = c("Tree" = "parent_id",
"parent_id" = "Tree"),
keep = F) %>%
select(Tree, parent_id)
time_travellers %>% print(n=50)
time_travellers <- time_travellers %>%
mutate(tt = T)
filtered_franz <- full_join(time_travellers, filtered_franz, by = c("Tree" = "Tree", "parent_id" = "parent_id"))
head(filtered_franz)
names(filtered_franz)
# filtering by high lod scores, gathering parent ids,
# removing na parent matches then doing an inner join off of parent id
convenient_parents_to_join <- coords %>%
rename(parent_id = Tree)
head(convenient_parents_to_join)
franz_coords <- inner_join(filtered_franz, convenient_parents_to_join, by="parent_id") %>%
rename(parent_x = X, parent_y = Y) %>%
inner_join(y=coords, by="Tree") %>%
rename(offspring_x = X, offspring_y = Y) %>%
select(Tree, parent_id, LOD, parent_lod_score, parent_x, parent_y, offspring_x, offspring_y, tt)
names(franz_coords)
nrow(franz_coords)
?inner_join
?gather
franz_map_area <- get_stamenmap(bbox=c(
left = min(franz_coords$offspring_x - 0.003),
bottom = min(franz_coords$offspring_y - 0.003),
right = max(franz_coords$offspring_x + 0.003),
top = max(franz_coords$offspring_y + 0.003)),
zoom = 14,
maptype = 'terrain')
ggmap(franz_map_area) +
# geom_point(geno_coords, mapping=aes(X, Y), size = 0.5) +
geom_segment(franz_coords,
mapping=aes(x=parent_x, y=parent_y, xend=offspring_x, yend=offspring_y, color=tt),
arrow = arrow(
length = unit(0.01, "npc"),
type = "closed",
angle = 20),
size=1) +
facet_grid(.~tt)
franz_distances <- franz_coords %>%
mutate(offspring_coord_vector=paste(as.character(offspring_x), as.character(offspring_y))) %>%
mutate(parent_coord_vector=paste(as.character(parent_x), as.character(parent_y)))
head(franz_distances)
distm(as.vector(strsplit(franz_distances$offspring_coord_vector[1], " ", fixed=T)))
# now lets join this onto franz_filtered
trees_distances <- inner_join(distances_m, franz_coords, by = c("offspring_id"="Tree",
"parent_id"="parent_id"))
trees_distances %>% group_by(tt) %>%
summarize(median_d = median(distance),
mean_d = mean(distance),
sd_d = sd(distance),
max_d = max(distance),
min_d = min(distance),
n = n())
t.test(
x = trees_distances %>% filter(tt) %>% select(distance),
y = trees_distances %>% filter(is.na(tt)) %>% select(distance)
)
cloneless_franz <- read_csv("franz-grouped/all-clusters/cloneless/with_selfing/parentage.csv")
names(cloneless_franz)
# made it tall so that each parent relationship was its own row with parent_lod_score
filtered_franz <- cloneless_franz %>%
rename(Tree=Offspring) %>%
gather(key=parent_num, value=parent_id, `Parent 1`, `Parent 2`, na.rm = T) %>%
gather(key=parent_num, value=parent_lod_score, `Pair LOD Parent 1`, `Pair LOD Parent 1`) %>%
filter(parent_lod_score > 3)
time_travellers <- inner_join(filtered_franz, filtered_franz, by = c("Tree" = "parent_id",
"parent_id" = "Tree"),
keep = F) %>%
select(Tree, parent_id)
time_travellers %>% print(n=50)
time_travellers <- time_travellers %>%
mutate(tt = T)
filtered_franz <- full_join(time_travellers, filtered_franz, by = c("Tree" = "Tree", "parent_id" = "parent_id"))
head(filtered_franz)
names(filtered_franz)
# filtering by high lod scores, gathering parent ids,
# removing na parent matches then doing an inner join off of parent id
convenient_parents_to_join <- coords %>%
rename(parent_id = Tree)
head(convenient_parents_to_join)
franz_coords <- inner_join(filtered_franz, convenient_parents_to_join, by="parent_id") %>%
rename(parent_x = X, parent_y = Y) %>%
inner_join(y=coords, by="Tree") %>%
rename(offspring_x = X, offspring_y = Y) %>%
select(Tree, parent_id, LOD, parent_lod_score, parent_x, parent_y, offspring_x, offspring_y, tt)
names(franz_coords)
nrow(franz_coords)
?inner_join
?gather
franz_map_area <- get_stamenmap(bbox=c(
left = min(franz_coords$offspring_x - 0.003),
bottom = min(franz_coords$offspring_y - 0.003),
right = max(franz_coords$offspring_x + 0.003),
top = max(franz_coords$offspring_y + 0.003)),
zoom = 14,
maptype = 'terrain')
ggmap(franz_map_area) +
# geom_point(geno_coords, mapping=aes(X, Y), size = 0.5) +
geom_segment(franz_coords,
mapping=aes(x=parent_x, y=parent_y, xend=offspring_x, yend=offspring_y, color=tt),
arrow = arrow(
length = unit(0.01, "npc"),
type = "closed",
angle = 20),
size=1) +
facet_grid(.~tt)
franz_distances <- franz_coords %>%
mutate(offspring_coord_vector=paste(as.character(offspring_x), as.character(offspring_y))) %>%
mutate(parent_coord_vector=paste(as.character(parent_x), as.character(parent_y)))
head(franz_distances)
distm(as.vector(strsplit(franz_distances$offspring_coord_vector[1], " ", fixed=T)))
# made it tall so that each parent relationship was its own row with parent_lod_score
filtered_franz <- cloneless_franz %>%
rename(Tree=Offspring) %>%
gather(key=parent_num, value=parent_id, `Parent 1`, `Parent 2`, na.rm = T) %>%
gather(key=parent_num, value=parent_lod_score, `Pair LOD Parent 1`, `Pair LOD Parent 1`) %>%
filter(parent_lod_score > 3)
time_travellers <- inner_join(filtered_franz, filtered_franz, by = c("Tree" = "parent_id",
"parent_id" = "Tree"),
keep = F) %>%
select(Tree, parent_id)
time_travellers %>% print(n=50)
time_travellers <- time_travellers %>%
mutate(tt = T)
filtered_franz <- full_join(time_travellers, filtered_franz, by = c("Tree" = "Tree", "parent_id" = "parent_id"))
head(filtered_franz)
names(filtered_franz)
# filtering by high lod scores, gathering parent ids,
# removing na parent matches then doing an inner join off of parent id
convenient_parents_to_join <- coords %>%
rename(parent_id = Tree)
head(convenient_parents_to_join)
franz_coords <- inner_join(filtered_franz, convenient_parents_to_join, by="parent_id") %>%
rename(parent_x = X, parent_y = Y) %>%
inner_join(y=coords, by="Tree") %>%
rename(offspring_x = X, offspring_y = Y) %>%
select(Tree, parent_id, LOD, parent_lod_score, parent_x, parent_y, offspring_x, offspring_y, tt)
names(franz_coords)
nrow(franz_coords)
?inner_join
?gather
franz_map_area <- get_stamenmap(bbox=c(
left = min(franz_coords$offspring_x - 0.003),
bottom = min(franz_coords$offspring_y - 0.003),
right = max(franz_coords$offspring_x + 0.003),
top = max(franz_coords$offspring_y + 0.003)),
zoom = 14,
maptype = 'terrain')
ggmap(franz_map_area) +
# geom_point(geno_coords, mapping=aes(X, Y), size = 0.5) +
geom_segment(franz_coords,
mapping=aes(x=parent_x, y=parent_y, xend=offspring_x, yend=offspring_y, color=tt),
arrow = arrow(
length = unit(0.01, "npc"),
type = "closed",
angle = 20),
size=1) +
facet_grid(.~tt)
franz_distances <- franz_coords %>%
mutate(offspring_coord_vector=paste(as.character(offspring_x), as.character(offspring_y))) %>%
mutate(parent_coord_vector=paste(as.character(parent_x), as.character(parent_y)))
for (i in 1:(nrow(franz_distances)) ){
distances_m <- distances_m %>% add_row(
offspring_id = franz_distances$Tree[i],
parent_id = franz_distances$parent_id[i],
distance = as.numeric(distm(as.numeric(unlist(strsplit(franz_distances$offspring_coord_vector[i], " ", fixed=T))),
as.numeric(unlist(strsplit(franz_distances$parent_coord_vector[i], " ", fixed=T)))))
)
#print(i)
#print(franz_distances$Tree[i])
#print(as.numeric(distm(as.numeric(unlist(strsplit(franz_distances$offspring_coord_vector[i], " ", fixed=T))),
#as.numeric(unlist(strsplit(franz_distances$parent_coord_vector[i], " ", fixed=T))))))
}
distances_m = tibble(offspring_id = "some_id", parent_id = "other_id", distance = 0)
distances_m
for (i in 1:(nrow(franz_distances)) ){
distances_m <- distances_m %>% add_row(
offspring_id = franz_distances$Tree[i],
parent_id = franz_distances$parent_id[i],
distance = as.numeric(distm(as.numeric(unlist(strsplit(franz_distances$offspring_coord_vector[i], " ", fixed=T))),
as.numeric(unlist(strsplit(franz_distances$parent_coord_vector[i], " ", fixed=T)))))
)
#print(i)
#print(franz_distances$Tree[i])
#print(as.numeric(distm(as.numeric(unlist(strsplit(franz_distances$offspring_coord_vector[i], " ", fixed=T))),
#as.numeric(unlist(strsplit(franz_distances$parent_coord_vector[i], " ", fixed=T))))))
}
distances_m
distm(as.numeric(unlist(strsplit(franz_distances$offspring_coord_vector[3], " ", fixed=T))),
as.numeric(unlist(strsplit(franz_distances$parent_coord_vector[3], " ", fixed=T))))
distances_m <- distances_m %>% filter(offspring_id != "some_id")
distances_m
# now lets join this onto franz_filtered
trees_distances <- inner_join(distances_m, franz_coords, by = c("offspring_id"="Tree",
"parent_id"="parent_id"))
trees_distances %>% group_by(tt) %>%
summarize(median_d = median(distance),
mean_d = mean(distance),
sd_d = sd(distance),
max_d = max(distance),
min_d = min(distance),
n = n())
t.test(
x = trees_distances %>% filter(tt) %>% select(distance),
y = trees_distances %>% filter(is.na(tt)) %>% select(distance)
)
t.test(x=trees_distances %>% filter(is.na(tt)) %>% select(distance), mu=30)
trees_distances %>% group_by(tt) %>%
summarize(median_d = median(distance),
mean_d = mean(distance),
sd_d = sd(distance),
max_d = max(distance),
min_d = min(distance),
n = n())
trees_distances %>%
# filter(distance < 1000) %>%
ggplot(aes(x = distance,y=after_stat(density))) +
geom_histogram(fill="thistle2", bins=50) +
facet_grid(.~tt) +
geom_density(color = "red") +
theme_classic()
t.test(x=trees_distances %>% filter(is.na(tt)) %>% select(distance), mu=30.0)
trees_distances %>%
filter(is.na(tt)) %>%
ggplot(aes(x = distance,y=after_stat(density))) +
geom_histogram(fill="thistle2", bins=50) +
geom_density(color = "red") +
theme_classic()
trees_distances %>%
filter(is.na(tt)) %>%
ggplot(aes(x = distance,y=after_stat(density))) +
geom_histogram(fill="thistle2", bins=50) +
geom_density(color = "red") +
theme_classic() +
labs(x="Distance (m)", y = "Density")
trees_distances %>%
filter(is.na(tt)) %>%
ggplot(aes(x = distance,y=after_stat(density))) +
geom_histogram(fill="thistle2", bins=50) +
geom_density(color = "red") +
theme_classic() +
labs(x="Distance (m)", y = "Density", title = "Distribution of dispersal distance")
trees_distances %>%
filter(is.na(tt)) %>%
ggplot(aes(x = distance,y=after_stat(density))) +
geom_histogram(fill="thistle2", bins=40) +
geom_density(color = "red") +
theme_classic() +
labs(x="Distance (m)", y = "Density", title = "Distribution of dispersal distance")
trees_distances %>%
filter(is.na(tt)) %>%
ggplot(aes(x = distance,y=after_stat(density))) +
geom_histogram(fill="thistle2", bins=20) +
geom_density(color = "red") +
theme_classic() +
labs(x="Distance (m)", y = "Density", title = "Distribution of dispersal distance")
trees_distances %>%
filter(is.na(tt)) %>%
ggplot(aes(x = distance,y=after_stat(density))) +
geom_histogram(fill="thistle2", bins=40) +
geom_density(color = "red") +
theme_classic() +
labs(x="Distance (m)", y = "Density", title = "Distribution of dispersal distance")
trees_distances %>%
filter(is.na(tt)) %>%
ggplot(aes(x = distance,y=after_stat(density))) +
geom_histogram(fill="thistle2", bins=50) +
geom_density(color = "red") +
theme_classic() +
labs(x="Distance (m)", y = "Density", title = "Distribution of dispersal distance")
trees_distances %>%
filter(is.na(tt)) %>%
ggplot(aes(x = distance,y=after_stat(density))) +
geom_histogram(fill="thistle2", bins=40) +
geom_density(color = "red") +
theme_classic() +
labs(x="Distance (m)", y = "Density", title = "Distribution of dispersal distance")
trees_distances %>%
filter(is.na(tt)) %>%
ggplot(aes(x = distance,y=after_stat(density))) +
geom_histogram(fill="thistle2", bins=50) +
geom_density(color = "red") +
theme_classic() +
labs(x="Distance (m)", y = "Density", title = "Distribution of dispersal distance")
trees_distances %>%
filter(is.na(tt)) %>%
ggplot(aes(x = distance,y=after_stat(density))) +
geom_histogram(fill="thistle2", bins=40) +
geom_density(color = "red") +
theme_classic() +
labs(x="Distance (m)", y = "Density", title = "Distribution of dispersal distance")
trees_distances %>%
filter(is.na(tt), distance < 200) %>%
ggplot(aes(x = distance,y=after_stat(density))) +
geom_histogram(fill="thistle2", bins=40) +
geom_density(color = "red") +
theme_classic() +
labs(x="Distance (m)", y = "Density", title = "Distribution of dispersal distance")
geno_coords
trees_coords
trees_coords$child_x
trees_distances %>% filter(is.na(tt)) %>% select(distance) %>%
ggplot(aes(x=distance)) +
geom_boxplot() +
theme_classic()
trees_distances %>%
filter(is.na(tt), distance < 200) %>%
ggplot(aes(x = distance,y=after_stat(density))) +
geom_histogram(fill="thistle2", bins=40) +
geom_density(color = "red") +
theme_classic() +
labs(x="Distance (m)", y = "Density", title = "Distribution of dispersal distance")
trees_distances %>% filter(is.na(tt)) %>% select(distance) %>%
ggplot(aes(x=distance)) +
geom_boxplot() +
theme_classic()
trees_distances %>%
filter(is.na(tt), distance < 200) %>%
ggplot(aes(x = distance,y=after_stat(density))) +
geom_histogram(fill="thistle2", bins=40) +
geom_density(color = "red") +
theme_classic() +
labs(x="Distance (m)", y = "Density", title = "Distribution of dispersal distance")
trees_distances %>%
trees_distances %>%
filter(is.na(tt)) %>%
ggplot(aes(x = distance,y=after_stat(density))) +
geom_histogram(fill="thistle2", bins=40) +
geom_density(color = "red") +
theme_classic() +
labs(x="Distance (m)", y = "Density", title = "Distribution of dispersal distance")
trees_distances %>%
filter(is.na(tt)) %>%
ggplot(aes(x = distance,y=after_stat(density))) +
geom_histogram(fill="thistle2", bins=40) +
geom_density(color = "red") +
theme_classic() +
labs(x="Distance (m)", y = "Density", title = "Distribution of dispersal distance")
trees_distances %>% group_by(tt) %>%
summarize(median_d = median(distance),
mean_d = mean(distance),
sd_d = sd(distance),
max_d = max(distance),
min_d = min(distance),
n = n())
trees_distances %>%
filter(is.na(tt)) %>%
ggplot(aes(x = distance,y=after_stat(density))) +
geom_histogram(fill="thistle2", bins=40) +
geom_density(color = "red") +
theme_classic() +
labs(x="Distance (m)", y = "Density", title = "Distribution of estimated dispersal distance")
t.test(x=trees_distances %>% filter(is.na(tt)) %>% select(distance), mu=30.0)
t.test(
x = trees_distances %>% filter(tt) %>% select(distance),
y = trees_distances %>% filter(is.na(tt)) %>% select(distance)
)
trees_distances
trees_distances %>% filter(tt) %>% select(distance)
print(trees_distances %>% filter(tt) %>% select(distance), n=52)
print(trees_distances %>% filter(tt) %>% select(distance) %>% arrange(distance), n=52)
trees_distances %>% group_by(tt) %>%
summarize(median_d = median(distance),
mean_d = mean(distance),
sd_d = sd(distance),
max_d = max(distance),
min_d = min(distance),
n = n())
t.test(x=trees_distances %>% filter(is.na(tt)) %>% select(distance), mu=30.0)
t.test(
x = trees_distances %>% filter(tt) %>% select(distance),
y = trees_distances %>% filter(is.na(tt)) %>% select(distance)
)
trees_distances %>%
filter(is.na(tt)) %>%
ggplot(aes(x = distance,y=after_stat(density))) +
geom_histogram(fill="thistle2", bins=40) +
geom_density(color = "red") +
geom_boxplot() +
theme_classic() +
labs(x="Distance (m)", y = "Density", title = "Distribution of estimated dispersal distance")
trees_distances %>%
filter(is.na(tt)) %>%
ggplot(aes(x = distance,y=after_stat(density))) +
geom_histogram(fill="thistle2", bins=40) +
geom_density(color = "red") +
theme_classic() +
labs(x="Distance (m)", y = "Density", title = "Distribution of estimated dispersal distance") +
geom_boxplot()
trees_distances %>%
filter(is.na(tt)) %>%
ggplot(aes(x = distance,y=after_stat(density))) +
geom_histogram(fill="thistle2", bins=40) +
geom_density(color = "red") +
theme_classic() +
labs(x="Distance (m)", y = "Density", title = "Distribution of estimated dispersal distance") +
geom_boxplot(aes(x=distance))
trees_distances %>%
filter(is.na(tt)) %>%
ggplot(aes(x = distance,y=after_stat(density))) +
geom_histogram(fill="thistle2", bins=40) +
geom_density(color = "red") +
theme_classic() +
labs(x="Distance (m)", y = "Density", title = "Distribution of estimated dispersal distance")
?quantile
trees_distances %>% group_by(tt) %>%
summarize(median_d = median(distance),
mean_d = mean(distance),
sd_d = sd(distance),
max_d = max(distance),
min_d = min(distance),
n = n(),
p95 = quantile(distance, 0.95))
trees_distances %>% filter(is.na(tt)) %>%
filter(distance > quantile(distance, 0.95))
